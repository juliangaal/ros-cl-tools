#!/usr/bin/env bash

num_failed=0
tests=0
dir=$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)
result_dir="${dir}/results"


init() {
  source ../ros_cl_tools
  echo "Running Tests in $dir"
  
  if [[ -d "$result_dir" ]]; then
    rm -rf "${result_dir}"
    mkdir "$result_dir"
	else
		mkdir "$result_dir"
	fi  
}

add_fail() {
  ((num_failed++))
}

summary() {
  echo ''
  if [[ ! $num_failed -eq 0 ]]; then
    echolor "${num_failed}/${tests} Tests failed" --red
	else
    echolor "${num_failed}/${tests} Tests failed" --green
  fi

  echo "Done"
}

run_shellcheck() {
  shellcheck -V &> /dev/null
  if [[ $# -eq 0 ]]; then
    while true; do
    read -p 'Want to run shellcheck? [yn] ' yn
      case $yn in
        [Yy]* ) shellcheck ../ros_cl_tools; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  fi
}

result_to_str() {
  local result=$1

  if [[ $result -eq 0 ]]; then
    echo 'correctly identified as valid  '
  else
    echo 'correctly identified as invalid'
  fi
}

fail_str() {
  local output=$1
  local fail_str='[  FAIL  ]'

  echolor "$fail_str $output" --red
}

succ_str() {
  local output=$1
  local succ_str='[   OK   ]'

  echolor "$succ_str $output" --green
}

stat_str() {
  local output=$1
  local offset='[ STATUS ]'
  echo "$offset $1"
}

test_valid_master() {
  echo ''
  echo "[ TEST $((++tests)) ] ${FUNCNAME[0]}"

  masters=('https://dfki@192.168.0.1:11311' 'https://dfki@uos.de' \
           'https://dfki@uos.de:11311' 'https://flamara@informatik.uos.de:11311' \
           'http' 'gdgdkjl567')
  results=(0 1 0 0 1 1)

  if [[ ! ${#masters[@]} -eq ${#results[@]} ]]; then add_fail; echolor 'invalid testing parameters' --red; return 1; fi

  for i in "${!masters[@]}"
  do
    valid_master "${masters[i]}" &> /dev/null

  if [[ $? -eq ${results[i]} ]]; then succ_str "$(result_to_str ${results[i]}): ${masters[i]}" 
  else add_fail; fail_str "$(result_to_str ${results[i]}): ${masters[i]}"; fi
  done
}

test_create_rosinstall() {
  local ws="$2"
  local ws_src="${ws}/src"
  local test_file="$1"
  local install_file="${ws_src}/.rosinstall"
  local generated_file="${install_file}_generated"
  local shell='bash'
  local ros_version='kinetic'

  if [[ ! -f "$test_file" ]]; then
    echolor "Workspace test file $test_file doesn't exist" --red
    return 1
  fi

  

  echo ''
  echo "[ TEST $3 ] ${FUNCNAME[0]}"

  mkdir -p "$ws_src" &> /dev/null
  cp "$test_file" "$install_file"
  cd "$ws"

  stat_str "Setting up mock workspace from $test_file .."
  wstool update -t "$ws_src" &> /dev/null

  source /opt/ros/"$ros_version"/setup."$shell"

  stat_str "Creating rosinstall .."
  cd "$ws_src" && create_rosinstall &> /dev/null

  if $(diff .rosinstall .rosinstall_generated &> /dev/null); then
    succ_str "rosinstall generation successful"
  else
    add_fail; fail_str "rosinstall generation unsuccessful"
  fi

  if [[ ! -d "$result_dir" ]]; then mkdir "$result_dir"; fi

  echo "${generated_file} to ${result_dir}/${test_file##*/}_generated"
  cp "${generated_file}" "${result_dir}"/"${generated_file##*/}"
  rm -rf "$ws"
}

test_create_rosinstalls() {
  local start_dir="$dir"
  local ws_test_1="${start_dir}/test_ws1"
  local ws_test_2="${start_dir}/test_ws2"
  local test_files_dir="${start_dir}/rosinstalls"
  local test_files=("${test_files_dir}/test.rosinstall" \
                    "${test_files_dir}/testrec.rosinstall")

  echo ''
  stat_str 'Creating mock catkin_workspaces to test .rosinstall generation.'
  stat_str 'Grab a coffee, this can take a while ...'

  ((++tests)); exec 3< <(test_create_rosinstall "${test_files[0]}" "$ws_test_1" $tests) 
  sleep 1
  ((++tests)); exec 4< <(test_create_rosinstall "${test_files[1]}" "$ws_test_2" $tests)

  output_test_1=$(cat <&3)
  if grep -q 'FAIL' "$output_test_1" &> /dev/null
  then
    add_fail
  fi

  output_test_2=$(cat <&4)
  if grep -q 'FAIL' "$output_test_2" &> /dev/null
  then
    add_fail
  fi

  echo "$output_test_1"
  echo "$output_test_2"
}

init

test_valid_master
test_create_rosinstalls

summary
