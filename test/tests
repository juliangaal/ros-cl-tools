#!/usr/bin/env bash

num_failed=0
tests=0
test_desc=('A' 'B' 'C' 'D')
test_desc_index=0
dir=$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)
home="${dir%/*}"
result_dir="${dir}/results"
test_files_dir="${dir}/config_files"
test_workspaces=("${dir}/test_ws2" "${dir}/test_ws1")

init() {
  source ${home}/ros_cl_tools
  if [[ $? -eq 1 ]]; then fail_str "Can't source script"; exit 1; fi

  stat_str "Found ros_cl_tools file $ROS_CL_TOOLS" --nl
  stat_str "Running Tests in $dir. Config: $ros_version $shell"

  if [[ -d "$result_dir" ]]; then
    rm -rf "${result_dir}"
    mkdir "$result_dir"
	else
		mkdir "$result_dir"
	fi

  source /opt/ros/"$ros_version"/setup."$shell"
}

add_fail() {
  ((num_failed++))
}

summary() {
  for ws in "${test_workspaces[@]}"
  do
    rm -rf "$ws"
  done

  summ_str ''

  if [[ ! $num_failed -eq 0 ]]; then
    fail_str "${num_failed}/${tests} Tests failed" --nl
	else
    succ_str "${num_failed}/${tests} Tests failed" --nl
  fi

  echo ''
}

run_shellcheck() {
  shellcheck -V &> /dev/null
  if [[ $# -eq 0 ]]; then
    while true; do
    read -p 'Want to run shellcheck? [yn] ' yn
      case $yn in
        [Yy]* ) shellcheck ../ros_cl_tools; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  fi
}

result_to_str() {
  local result=$1

  if [[ $result -eq 0 ]]; then
    echo 'correctly identified as valid  '
  else
    echo 'correctly identified as invalid'
  fi
}

fail_str() {
  local output=$1
  local fail_str='[  FAIL  ]'

  echolor "$fail_str $output" --red --test
}

succ_str() {
  local output=$1
  local succ_str='[   OK   ]'

  echolor "$succ_str $output" --green --test
}

stat_str() {
  local output=$1
  local offset='[ STATUS ]'
  if [[ "$2" == "--nl" ]]; then echo ''; fi
  echo "$offset $1"
}

test_str() {
  local str=$1
  local offset='|  TEST  |'
  local astrin='----------'
  echo ''
  echo "$astrin"
  echo "$offset ${str^^}"
  echo "$astrin"
}

summ_str() {
  local str=$1
  local offset='| RESULT |'
  local astrin='----------'
  echo ''
  echo "$astrin"
  echo "$offset ${str}"
  echo "$astrin"
}

test_connect_v() {
  test_str "${FUNCNAME[0]}"

  local ros_ip_goal="192.168.0.1"
  local master_uri_goal="https://user@name.de:11311"

# here documents appear to have to be at the beginning of line ONLY
{
connect -v <<ANSWERS
$ros_ip_goal
$master_uri_goal
ANSWERS
} &> /dev/null

  test_connect_result "$ros_ip_goal" "$master_uri_goal"
}

test_connect() {
  test_str "${FUNCNAME[0]}"
  local ssh_config_file="${test_files_dir}/ssh.config"
  local ssh_dir="${HOME}/.ssh"
  local target="${ssh_dir}/config"
  local ros_ip_goal="$(curl -s http://whatismyip.akamai.com/)"
  local master_uri_goal="https://fooey@dev.example.com:11311"

  if [[ ! -d "${ssh_dir}" ]]; then mkdir "$ssh_dir"; fi
  cp "$ssh_config_file" "$target" &> /dev/null

  connect dev &> /dev/null

  test_connect_result "$ros_ip_goal" "$master_uri_goal"
}

test_connect_result() {
  local ros_ip_goal="$1"
  local master_uri_goal="$2"

  ((++tests))
  if [[ "$ROS_MASTER_URI" == "$master_uri_goal" ]]; then
    succ_str "Set correct Master Uri: $ROS_MASTER_URI"
  else
    add_fail; fail_str "Couldn't set correct Master Uri: $ROS_MASTER_URI"
  fi

  ((++tests))
  if [[ "$ROS_IP" == "$ros_ip_goal" ]]; then
    succ_str "Set correct ROS ip: $ROS_IP"
  else
    add_fail; fail_str "Couldn't set correct ROS ip: $ROS_IP"
  fi

  ((++tests))
  if [[ "$ROS_HOSTNAME" == "$ros_ip_goal" ]]; then
    succ_str "Set correct Hostname: $ROS_HOSTNAME"
  else
    add_fail; fail_str "Couldn't set correct Hostname: $ROS_HOSTNAME"
  fi
}

test_valid_master() {
  test_str "${FUNCNAME[0]}"

  masters=('https://dfki@192.168.0.1:11311' 'https://dfki@uos.de' \
           'https://dfki@uos.de:11311' 'https://flamara@informatik.uos.de:11311' \
           'http' 'gdgdkjl567')
  results=(0 1 0 0 1 1)

  if [[ ! ${#masters[@]} -eq ${#results[@]} ]]; then
    add_fail; echolor 'invalid testing parameters' --red --test;
    return 1;
  fi

  for i in "${!masters[@]}"
  do
    valid_master "${masters[i]}" &> /dev/null

    if [[ $? -eq ${results[i]} ]]; then
      succ_str "$(result_to_str ${results[i]}): ${masters[i]}"
    else
      add_fail; fail_str "$(result_to_str ${results[i]}): ${masters[i]}";
    fi

    ((++tests))

  done
}

test_create_rosinstall() {
  local ws="$2"
  local ws_src="${ws}/src"
  local ws_devel="${ws}/devel"
  local test_file="$1"
  local install_file="${ws_src}/.rosinstall"
  local setup_file="$3"
  local generated_file="${install_file}_generated"
  local shell='bash'
  local status=1
  local ros_version='kinetic'

  if [[ ! -f "$test_file" ]]; then
    echolor "Workspace test file $test_file doesn't exist" --red --test
    return 1
  fi

  test_str "${FUNCNAME[0]}"

  mkdir -p "$ws_src" &> /dev/null
  mkdir "$ws_devel" &> /dev/null
  cp "$test_file" "$install_file"
  # setup.bash and setup.sh is needed for sourcing...remember, just a mock
  # workspace
  cp "${setup_file}.bash" "${ws_devel}/setup.bash"
  cp "${setup_file}.sh" "${ws_devel}/setup.sh"
  cd "$ws"

  stat_str "Setting up mock workspace from $test_file .."
  wstool update -t "$ws_src" &> /dev/null

  source /opt/ros/"${ros_version}"/setup."${shell}"
  echo '# this is a mock workspace' > "${ws}/.catkin_workspace"

  stat_str "Creating rosinstall .."
  cd "$ws_src" && create_rosinstall &> /dev/null

  if $(diff .rosinstall .rosinstall_generated &> /dev/null); then
    status=0
    succ_str "rosinstall generation successful"
  else
    status=1; fail_str "rosinstall generation unsuccessful"
  fi

  if [[ ! -d "$result_dir" ]]; then mkdir "$result_dir"; fi
  cp "${generated_file}" "${result_dir}/${test_file##*/}"

  return $status
}

test_create_rosinstalls() {
  local start_dir="$dir"
  local test_ws_files=("${test_files_dir}/test.rosinstall" \
                       "${test_files_dir}/testrec.rosinstall")
  local test_setup_files=("${test_files_dir}/testsetup" \
                          "${test_files_dir}/testrecsetup")

  stat_str 'Creating mock catkin_workspaces to test .rosinstall generation.' --nl

  ((++tests)); ((test_desc_index++))
  exec 3< <(test_create_rosinstall "${test_ws_files[0]}" \
                                   "${test_workspaces[0]}" \
                                   "${test_setup_files[1]}")
  sleep 1
  ((++tests)); ((test_desc_index++))
  exec 4< <(test_create_rosinstall "${test_ws_files[1]}" \
                                   "${test_workspaces[1]}" \
                                   "${test_setup_files[1]}")

  output_test_1=$(cat <&3)
  echo "$output_test_1" | grep 'FAIL' &> /dev/null
  if [[ $? -eq 0 ]]; then add_fail; fi

  output_test_2=$(cat <&4)
  echo "$output_test_2" | grep 'FAIL' &> /dev/null
  if [[ $? -eq 0 ]]; then add_fail; fi

  echo "$output_test_1"
  echo "$output_test_2"
}

test_config_files() {
  test_str "${FUNCNAME[0]}"

  local ws_config='.workspace_config'
  local config_dir="${HOME}/.ros_cl_tools"

  # mock config file
  echo '#this is a mock file' > "${config_dir}/config"

  for ws in "${test_workspaces[@]}"
  do
    cd $ws
    ws_checker #&> /dev/null # TODO does PROMPT COMMAND behave differently?

    local workspace_file="${config_dir}/${PWD##*/}.ros_ws"

    ((++tests))
    if [[ -f "$workspace_file" ]]; then
      succ_str "Found workspace description file $workspace_file"
    else
      add_fail; fail_str "Did not find workspace description file $workspace_file"
    fi

    ((++tests))
    local abs_ws_config="${PWD}/$ws_config"
    if [[ -f "$abs_ws_config" ]]; then
      succ_str "Found workspace config file      $abs_ws_config"
    else
      add_fail; fail_str "Did not find workspace config file $abs_ws_config"
    fi

    ((++tests))
    (roscd) #&> /dev/null)
    if [[ $? -eq 0 ]]; then
      succ_str "workspace properly sourced"
    else
      add_fail; fail_str "workspace not properly sourced?"
    fi
  done
}

init

test_connect_v
test_connect
test_valid_master
test_create_rosinstalls
test_config_files

summary

if [[ ! $num_failed -eq 0 ]]; then exit 1; fi
